# writeup.txt

# 1. SQL Injection Prevention
------------------------------
Bungle should first consider using prepared statements as a first line of defense.
This seperation of data and code will deal with almost all SQL injection attempts, and it is
supported natively by PHP, which Bungle seems to be using for most of its backend code. By
compiling the SQL code beforehand and binding the data/variables to the code at the time of
execution, Bungle can prevent arbitrary SQL code from being executed by a malicious attacker.
As an added layer of defense, Bungle should also perform input validation and simply not allow
certain characters (eg. #, $, etc.) to be part of a search term or username. Additionally,
it should move on from using MD5 as the hash function for the password, since it has been shown
to be severely compromised. Bungle would be better served by a more secure alternative such as SHA-512. 


# 2. XSS Prevention
--------------------
An attacker will attempt to use HTML tags such as <data></data> and <script></script> to hiject the
website and inject their payload. Therefore, Bungle could prevent this by encoding/escaping potentially malicious
characters (<, >, &, $, etc.) to prevent execution of an attacker's payload. For example, encode '&' as '&amp',
'<' as '&lt', etc. Bungle should also perform some sort of URL validation to see whether the current URL is
valid and does not contain any hidden payloads.


# 3. CSRF Prevention
---------------------
Bungle could switch to using the Synchronizer Token pattern and generate a unique token per user
session on the server-side that is transmitted not through cookies, in order to be more resilient 
against CSRF attacks. Most modern frameworks such as .NET will already implement Synchronizer Token 
defenses, and so Bungle's security would be much improved by switching to using a modern framework.
If rewriting Bungle with a new framework might be too much work, an alternative would be to use the
"Double Submit Cookie" technique. The naive version of this technique simply includes a request parameter
value and the server verifies to see whether BOTH the cookie and the request parameter value matches. This
approach however is vulnerable to certain attacks and it is recommended that Bungle will upgrade to using
a signed Double Submit Cookie approach where cryptography is used to further secure the parameter value.